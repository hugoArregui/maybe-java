The aim of the Maybe type is to avoid using 'null' references.

A Maybe<T> represents a possibly non-existent value of type T.  The Maybe
type makes it impossible (without deliberate effort to circumvent the API)
to use the value when it does not exist.

A Maybe<T> is either unknown(), in which case a known value does not exist,
or definitely(v), in which case the value is known to be v.

That's not to say that Maybe doesn't have useful methods to work with
individual instances.  For example, the otherwise method:

   T otherwise(T defaultValue);

will return the Maybe's value if it is known and the defaultValue if it is not.
E.g.

       assertThat(unknown().otherwise(""), equalTo(""));
       assertThat(definitely("foo").otherwise(""), equalTo("foo"));

Otherwise is overloaded to take a Maybe<T> as a default:

   Maybe<T> otherwise(Maybe<T> maybeDefaultValue);

which lets you chain otherwise expressions:

   assertThat(unknown().otherwise(definitely("X")).otherwise(""), equalTo("X"));

Maybe also has a method that uses a function to map a Maybe<T> to a Maybe<U>

    <U> Maybe<U> to(Function<T,U> mapping);

which would transform unknown() to unknown(), otherwise apply the function to
the definite value and return the result wrapped in a Maybe.

Similarly there is a query method that takes a Predicate<T> and maps a Maybe<T>
to a Maybe<Boolean>.

All of which API calls make it impossible (without deliberate effort) to try to
get the value of nothing.
